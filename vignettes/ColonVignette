---
title: "Retrofit Vignette"
author: "Roopali Singh"
date: "`r Sys.Date()`"
output: BiocStyle::html_document
vignette: >
  %\VignetteIndexEntry{Retrofit Vignette}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

## Introduction

RETROFIT is a statistical method for reference-free deconvolution of spatial transcriptomics data to estimate cell type mixtures. In this Vignette, we will estimate cell type composition of a Colon dataset. We will annotate cell types using marker gene lists as well as single cell reference. 
We will also reproduce some of the results from the paper for illustration.

## Package Installation and other requirements

Install and load the packages using the following steps:
<!-- adam: this is not usable before submitting to and accepted by Bioconductor -->
```{r, eval=FALSE}
if(!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("retrofit")
```

```{r, load_library}
library(retrofit)
library(ggplot2)
library(grid)
library(cowplot)
library(colorspace)
```

## Spatial Transcriptomics Data

First load the ST data, using the following command:

```{r, data}
X         =read.csv("data/Colon_A4_X.csv", row.names = 1, check.names = FALSE)
```

## Pre-processing ST data 

You may also pre-process the ST data, similar to STdeconvolve, using the following steps:
<!-- Xi: need the pre-processing steps done by Xi using STdeconvolve package -->

This code will do the following:
- remove spots with too few genes
- remove genes that are present in 100% of the spots
- remove genes that are present in less than 5% of the spots
- find over dispersed genes for deconvolution.

In the end, the ST data matrix will consist of G genes and S spots i.e., a matrix of order G x S.

## Reference-free Deconvolution

Initialize the required parameters for deconvolution. We set the number of iterations, Iter = 4000 and number of components, L = 20. Lamda is kept at the default value of 0.01. 

<!-- Adam: please confirm the parameter settings -->

After initialization, run retrofit on the data (X) as follows:

```{r, decompose}
Iter = 4000
L = 20
result = RetrofitDecompose(X, L=L, iterations=Iter, seed=12)
H = result["h"]
W = result["w"]
Theta =result["th"]
```

Now we have our estimates of W (a matrix of order G x L), H (a matrix of order L x S) and Theta (a vector of L components). 
Next, we need to annotate the components, to get the proportion of K cell types. We can do this in two ways: (a) using an annotated single cell reference or (b) using the known marker genes. 


## Cell-type Annotation via known marker genes

Here, we will annotate using single cell reference. Load the single cell reference data:

```{r, data}
marker_ref   =read.csv("data/Colon_marker_ref.csv", row.names = 1, check.names = FALSE)
```

This file contains the list of marker genes for K = 8 cell types. Run the following command to get K cell-type mixtures from the ST data X:

```{r, annotate}
K = unique(marker_ref$Celltype) # number of cell types
result = RetrofitMapByMarkers(marker_ref, K, W, H)
H_mark = result["h"]
W_mark = result["w"]
```
<!-- Adam: this function should also give mapping maatrix visualization -->
We assign components to the cell type it has maximum average marker expression in, as shown in figure above. Finally, cell-type proportions for each spot in the ST data (X) are stored in H_mark of order K x S.


## Cell-type Annotation via annotated single cell reference

Here, we will annotate using single cell reference. Load the single cell reference data:

```{r, data}
sc_ref   =read.csv("data/Colon_sc_ref.csv", row.names = 1, check.names = FALSE)
```
This file contains average gene expression values for G genes in K=8 cell types i.e., a matrix of order G x K. Run the following command to get K cell-type mixtures from the ST data X:

```{r, annotate}
K = ncol(sc_ref) # number of cell types
result = RetrofitMapByCorrelation(sc_ref, K, W, H)
H_sc = result["h"]
W_sc = result["w"]
```
<!-- Adam: this function should also give mapping maatrix visualization -->
We assign components to the cell type it has maximum correlation with as shown in figure above. Finally, cell-type proportions for each spot in the ST data (X) are stored in H_sc of order K x S.
You can verify that the mappings from both methods are largely similar.

## Results and visualization

Hereon, we will be reproducing some of the analysis from the paper using marker-based mapping results.

Figure 4A: Proportion of cell-types in this tisse:

```{r}
rowSums(H_mark)/ncol(H_mark)
```

Figure 4C: 

Load the coordinates for the spots in the tissue and the tissue image:
```{r}
coords=read.csv("data/Colon_A4_coords.csv")
img <- png::readPNG("Colon_A4_tissue.png")
t <- rasterGrob(img1, width=unit(1,"npc"), height=unit(1,"npc"), interpolate = FALSE)
```

Find the cell-type with maximum proportion in each spot and plot:
```{r}
dat=as.data.frame(cbind(coords,t(H_mark)))
colnames(dat)=c(colnames(coords),rownames(H_mark))

df=dat[,-c(2:4)]
df$CellType=NA
for(i in 1:nrow(df)){
  df$CellType[i]=names(which.max(df[i,-c(1:3)]))
}
df$CellType=factor(df$CellType,levels=c("Epithelial", "Immune", "Myo.Meso","Muscle",
                                        "Neural", "Endothelium", "Pericytes","Fibroblasts"))
                                        
ggplot(df, aes(x=imagerow, y=imagecol))  +
  annotation_custom(t, 700, 6400, 990, 6550) + 
  geom_point(size=1.8, shape=21, aes(fill=CellType))+
  scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9","#009E73", "#CC79A7",
                             "#0072B2", "#D55E00" ,"#F0E442"),
                    labels=c("Epithelial", "Immune","Myofibroblasts/\nMesothelium",
                             "Muscle","Neural","Endothelium",
                             "Pericytes","Fibroblasts"))+
  xlab("") + ylab("") +theme_classic()+
  theme(legend.position = "none",
        axis.line = element_blank(),
        plot.margin = margin(-0.2, -0.2, 0.2, -1, "cm"), 
        axis.text.x = element_blank(), axis.text.y = element_blank(),
        axis.ticks.x=element_blank(),axis.ticks.y=element_blank())                   
```

Figure 4D and E:

Plot the spatial expression for Epithelial markers:
```{r}
df=cbind(coords,t(X4[as.character(marker_ref$Gene[marker_ref$Celltype=="Epithelial"]),]))
df$metagene=rowSums(df[,-c(1:6)])
df$metagene[df$metagene>quantile(df$metagene,0.95)]=quantile(df$metagene,0.95)

ggplot(df, aes(x=imagerow, y=imagecol))  +
  annotation_custom(t, 700, 6400, 990, 6550) + 
  geom_point(size=1.5,aes(color=metagene))+
  scale_color_gradientn(name="Epithelial Markers ",
                        colors=adjust_transparency("grey20",
                                                   alpha = c(0,0.5,1)),
                        n.breaks=3) +
  xlab("") + ylab("") +
  theme_classic()+
  theme(legend.key.height = unit(0.2, 'cm'), #change legend key size
        legend.key.width = unit(0.8, 'cm'),
        legend.title = element_text(size=10),
        legend.position = "bottom",
        legend.box.margin=margin(-20,-10,-5,-10),
        plot.margin = margin(-0.2, -0.2, 0.2, -1, "cm"), 
        axis.line=element_blank(),
        legend.text=element_text(size=8),
        axis.text.x = element_blank(), axis.text.y = element_blank(),
        axis.ticks.x=element_blank(),axis.ticks.y=element_blank())
```
Plot the estimated proportions for Epithelial cell-type:

```{r}
df=dat[,-c(2:4)]
ggplot(df, aes(x=imagerow, y=imagecol))  +
  annotation_custom(t, 700, 6400, 990, 6550) + 
  geom_point(size=1.5,aes(color=Epithelial))+
  scale_color_gradientn(name="Epithelial ",
                        colors=adjust_transparency("grey20",
                                                   alpha = c(0,0.5,1)),
                        n.breaks=3, limits=c(0,1)) +
  xlab("") + ylab("") +
  theme_classic()+
  theme(legend.key.height = unit(0.2, 'cm'), #change legend key size
        legend.key.width = unit(0.8, 'cm'),
        legend.title = element_text(size=10),
        legend.position = "bottom",
        legend.box.margin=margin(-20,-10,-5,-10),
        plot.margin = margin(-0.2, -0.2, 0.2, -1, "cm"), 
        axis.line=element_blank(),
        legend.text=element_text(size=8),
        axis.text.x = element_blank(), axis.text.y = element_blank(),
        axis.ticks.x=element_blank(),axis.ticks.y=element_blank())
```

Figure 5:

```{r}
## Structure Plots
plotfn <- function(df=NULL)
{
  #reshape to long format
  df$num <- 1:nrow(df)
  df1 <- reshape2::melt(df,id.vars = "num")
  #reversing order for cosmetic reasons
  df1 <- df1[rev(1:nrow(df1)),]
  
  #plot
  p <- ggplot(df1,aes(x=num,y=value,fill=variable))+
    geom_bar(stat="identity",position="fill",width = 1, space = 0)+
    scale_x_continuous(expand = c(0, 0))+
    scale_y_continuous(expand = c(0, 0))+
    labs(x = NULL, y = NULL)+
    theme_grey(base_size=7)+
    theme(legend.text = element_text(size = 8),legend.position = "bottom",
          legend.key.size = unit(0.4, "cm"),
          legend.title = element_blank(),
          axis.ticks = element_blank(),
          axis.text.x = element_blank())+
    scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", 
                               "#009E73", "#CC79A7", "#0072B2",
                               "#D55E00", "#F0E442"))
  
  p
}

df=as.data.frame(t(H_mark[c(2,4,6,5,7,1,8,3),]))
#pick max cluster, match max to cluster
maxval <- apply(df,1,max)
matchval <- vector(length=nrow(df))
for(j in 1:nrow(df)) matchval[j] <- match(maxval[j],df[j,])
#add max and match to df
df_q <- df
df_q$maxval <- maxval
df_q$matchval <- matchval
#order dataframe ascending match and decending max
df_q <- df_q[with(df_q, order(matchval,-maxval)), ]
#remove max and match
df_q$maxval <- NULL
df_q$matchval <- NULL

plotfn(df=df_q)+theme(legend.position="bottom")+ggtitle("Fetal 19 PCW (C)")+ theme(plot.title = element_text(hjust=0.5,size=9))
```





# Session information

```{r}
sessionInfo()
```



