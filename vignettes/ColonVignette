---
title: "Retrofit Vignette"
author: "Roopali Singh"
date: "`r Sys.Date()`"
output: BiocStyle::html_document
vignette: >
  %\VignetteIndexEntry{Retrofit Vignette}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

## Introduction

RETROFIT is a statistical method for reference-free deconvolution of spatial transcriptomics data to estimate cell type mixtures. In this Vignette, we will estimate cell type composition of a Colon dataset. We will annotate cell types using marker gene lists. 

## Package Installation

Install and load the package using the following steps:
<!-- adam: this is not usable before submitting to and accepted by Bioconductor -->
```{r, eval=FALSE}
if(!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("retrofit")
```

```{r, load_library}
library(retrofit)
```

## Spatial Transcriptomics Data

First load the ST data, using the following command:

```{r, data}
X         =read.csv("data/colon_x.csv", row.names = 1, check.names = FALSE)
```

## Pre-processing ST data 

You may also pre-process the ST data, similar to STdeconvolve, using the following steps:
<!-- Xi: need the pre-processing steps done by Xi using STdeconvolve package -->

This code will do the following:
- remove spots with too few genes
- remove genes that are present in 100% of the spots
- remove genes that are present in less than 5% of the spots
- find over dispersed genes for deconvolution.

In the end, the ST data matrix will consist of G genes and S spots i.e., a matrix of order G x S.

## Reference-free Deconvolution

Initialize the required parameters for deconvolution. We set the number of iterations, Iter = 4000 and number of components, L = 20. Lamda is kept at the default value of 0.01. 

<!-- Adam: please confirm the parameter settings -->

After initialization, run retrofit on the data (X) as follows:

```{r, decompose}
Iter = 4000
L = 20
result = RetrofitDecompose(X, L=L, iterations=Iter, seed=12)
H = result["h"]
W = result["w"]
Theta =result["th"]
```

Now we have our estimates of W (a matrix of order G x L), H (a matrix of order L x S) and Theta (a vector of L components). 
Next, we need to annotate the components, to get the proportion of K cell types. We can do this in two ways: (a) using an annotated single cell reference or (b) using the known marker genes. 


## Cell-type Annotation via known marker genes

Here, we will annotate using single cell reference. Load the single cell reference data:

```{r, data}
marker_ref   =read.csv("data/Colon_marker_ref.csv", row.names = 1, check.names = FALSE)
```

This file contains the list of marker genes for K = 8 cell types. Run the following command to get K cell-type mixtures from the ST data X:

```{r, annotate}
K = unique(marker_ref$Celltype) # number of cell types
result = RetrofitMapByMarkers(marker_ref, K, W, H)
H_mark = result["h"]
W_mark = result["w"]
```
<!-- Adam: this function should also give mapping maatrix visualization -->
We assign components to the cell type it has maximum average marker expression in, as shown in figure above. Finally, cell-type proportions for each spot in the ST data (X) are stored in H_mark of order K x S.


## Cell-type Annotation via annotated single cell reference

Here, we will annotate using single cell reference. Load the single cell reference data:

```{r, data}
sc_ref   =read.csv("data/Colon_sc_ref.csv", row.names = 1, check.names = FALSE)
```
This file contains average gene expression values for G genes in K=8 cell types i.e., a matrix of order G x K. Run the following command to get K cell-type mixtures from the ST data X:

```{r, annotate}
K = ncol(sc_ref) # number of cell types
result = RetrofitMapByCorrelation(sc_ref, K, W, H)
H_sc = result["h"]
W_sc = result["w"]
```
<!-- Adam: this function should also give mapping maatrix visualization -->
We assign components to the cell type it has maximum correlation with as shown in figure above. Finally, cell-type proportions for each spot in the ST data (X) are stored in H_sc of order K x S.
You can verify that the mappings from both methods are largely similar.


## Results and visualization

Hereon, we will be reproducing some of the analysis from the paper using marker-based mapping results.



We can visualize the results on the tissue and check its alignment with spatial marker expression.



# Session information

```{r}
sessionInfo()
```



